
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 19 08:45:42 COT 2022
//----------------------------------------------------

package controllers;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 19 08:45:42 COT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\003\013\000\002\003" +
    "\013\000\002\003\013\000\002\003\013\000\002\004\013" +
    "\000\002\004\013\000\002\004\013\000\002\004\013\000" +
    "\002\005\003\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\017\004\001\002\000\004\006\051\001" +
    "\002\000\004\017\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\014\001\002\000" +
    "\004\020\013\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\ufff8\001\002\000\012\011\020\012\015\013\016\014" +
    "\017\001\002\000\004\015\043\001\002\000\004\015\035" +
    "\001\002\000\004\015\027\001\002\000\004\015\021\001" +
    "\002\000\004\004\022\001\002\000\004\011\023\001\002" +
    "\000\004\016\024\001\002\000\004\007\025\001\002\000" +
    "\004\011\026\001\002\000\004\020\ufffc\001\002\000\004" +
    "\004\030\001\002\000\004\011\031\001\002\000\004\016" +
    "\032\001\002\000\004\007\033\001\002\000\004\011\034" +
    "\001\002\000\004\020\ufff9\001\002\000\004\004\036\001" +
    "\002\000\004\011\037\001\002\000\004\016\040\001\002" +
    "\000\004\007\041\001\002\000\004\011\042\001\002\000" +
    "\004\020\ufffa\001\002\000\004\004\044\001\002\000\004" +
    "\011\045\001\002\000\004\016\046\001\002\000\004\007" +
    "\047\001\002\000\004\011\050\001\002\000\004\020\ufffb" +
    "\001\002\000\012\011\055\012\052\013\053\014\054\001" +
    "\002\000\004\015\100\001\002\000\004\015\072\001\002" +
    "\000\004\015\064\001\002\000\004\015\056\001\002\000" +
    "\004\004\057\001\002\000\004\011\060\001\002\000\004" +
    "\016\061\001\002\000\004\007\062\001\002\000\004\011" +
    "\063\001\002\000\004\017\000\001\002\000\004\004\065" +
    "\001\002\000\004\011\066\001\002\000\004\016\067\001" +
    "\002\000\004\007\070\001\002\000\004\011\071\001\002" +
    "\000\004\017\ufffd\001\002\000\004\004\073\001\002\000" +
    "\004\011\074\001\002\000\004\016\075\001\002\000\004" +
    "\007\076\001\002\000\004\011\077\001\002\000\004\017" +
    "\ufffe\001\002\000\004\004\101\001\002\000\004\011\102" +
    "\001\002\000\004\016\103\001\002\000\004\007\104\001" +
    "\002\000\004\011\105\001\002\000\004\017\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\004\004\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    
    public void syntax_error (Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_EC1 SENTENCIA_EC2 SOLUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SOLUCION ::= PALABRA_RESERVADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SOLUCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_EC2 ::= ECUACION ASIGNACION DECIMAL_NEGATIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA_EC2 ::= ECUACION ASIGNACION DECIMAL_POSITIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_EC2 ::= ECUACION ASIGNACION ENTERO_NEGATIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_EC2 ::= ECUACION ASIGNACION ENTERO_POSITIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_EC1 ::= ECUACION ASIGNACION DECIMAL_NEGATIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC1",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA_EC1 ::= ECUACION ASIGNACION DECIMAL_POSITIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC1",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA_EC1 ::= ECUACION ASIGNACION ENTERO_NEGATIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC1",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SENTENCIA_EC1 ::= ECUACION ASIGNACION ENTERO_POSITIVO VARIABLEX SUMA ENTERO_POSITIVO VARIABLEY IGUALDAD ENTERO_POSITIVO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EC1",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SENTENCIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

